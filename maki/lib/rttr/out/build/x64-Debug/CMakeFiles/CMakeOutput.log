The system is: Windows - 10.0.22621 - AMD64
Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/cl.exe 
Build flags: 
Id flags:  

The output was:
0
Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30147 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

CMakeCXXCompilerId.cpp
Microsoft (R) Incremental Linker Version 14.29.30147.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCXXCompilerId.exe 
CMakeCXXCompilerId.obj 


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.exe"

Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.obj"

The CXX compiler identification is MSVC, found in "C:/Users/Aurel/Desktop/Maki_Clone/maki/maki/lib/rttr/out/build/x64-Debug/CMakeFiles/3.20.21032501-MSVC_2/CompilerIdCXX/CMakeCXXCompilerId.exe"

Detecting CXX compiler ABI info compiled with the following output:
Change Dir: C:/Users/Aurel/Desktop/Maki_Clone/maki/maki/lib/rttr/out/build/x64-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_74781 && [1/2] Building CXX object CMakeFiles\cmTC_74781.dir\CMakeCXXCompilerABI.cpp.obj
[2/2] Linking CXX executable cmTC_74781.exe



Performing C++ SOURCE FILE Test HAS_NO_EXCEPT_TYPE_SIGNATURE_SUPPORT succeeded with the following output:
Change Dir: C:/Users/Aurel/Desktop/Maki_Clone/maki/maki/lib/rttr/out/build/x64-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_8ce11 && [1/2] Building CXX object CMakeFiles\cmTC_8ce11.dir\src.cxx.obj
[2/2] Linking CXX executable cmTC_8ce11.exe


Source file was:

                              #include <type_traits>
                              typedef void F();
                              typedef void G() noexcept;
                              
                              std::enable_if<
                                  !std::is_same<F, G>::value,
                                  int
                              >::type i = 42;
                              
                              int main() { return 0; }
                              
Performing C++ SOURCE FILE Test HAS_STL_NO_EXCEPT_TYPE_SIGNATURE_SUPPORT succeeded with the following output:
Change Dir: C:/Users/Aurel/Desktop/Maki_Clone/maki/maki/lib/rttr/out/build/x64-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_9e004 && [1/2] Building CXX object CMakeFiles\cmTC_9e004.dir\src.cxx.obj
[2/2] Linking CXX executable cmTC_9e004.exe


Source file was:

                              #include <type_traits>
                              struct foo { void func() const noexcept {} };
                              template<typename T>
                              void test_func(T)
                              {
                                  static_assert(std::is_member_function_pointer<T>::value, "Failed");
                              }
                              int main() { test_func(&foo::func); return 0; }
                              
Performing C++ SOURCE FILE Test HAS_CXX_CONSTEXPR succeeded with the following output:
Change Dir: C:/Users/Aurel/Desktop/Maki_Clone/maki/maki/lib/rttr/out/build/x64-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_976ab && [1/2] Building CXX object CMakeFiles\cmTC_976ab.dir\src.cxx.obj
[2/2] Linking CXX executable cmTC_976ab.exe


Source file was:

                              constexpr int abs(int x)
                              {
                                  if(x < 0) x = -x;
                                  return x;
                              }
                              
                              int main() { }
                              
Performing C++ SOURCE FILE Test HAS_PARTIAL_SPECIALIZATION_FOR_ARRAYS succeeded with the following output:
Change Dir: C:/Users/Aurel/Desktop/Maki_Clone/maki/maki/lib/rttr/out/build/x64-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_87891 && [1/2] Building CXX object CMakeFiles\cmTC_87891.dir\src.cxx.obj
[2/2] Linking CXX executable cmTC_87891.exe


Source file was:

                               #include <type_traits>
                               template<typename T>
                               struct template_type_trait : std::false_type {};
                               
                               template<template < bool > class T, bool N>
                               struct template_type_trait<T<N>> : std::true_type {};
                               
                               template<template <std::size_t> class T, std::size_t N>
                               struct template_type_trait<T<N>> : std::true_type {};
                               
                               template<std::size_t T>
                               struct bar{};
                               
                               int main() { static bool foo = template_type_trait<bar<100>>::value;}
                               
